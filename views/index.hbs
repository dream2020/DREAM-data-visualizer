
<script src="/javascripts/three/three.min.js"></script>
<script src='/javascripts/three/libs/dat.gui.min.js'></script>
<script src="/javascripts/three/controls/OrbitControls.js"></script>

<script src="/javascripts/three/loaders/TDSLoader.js"></script>
    
<script src="/javascripts/CCapture.all.min.js"></script>

<script>

    var gui, scene, camera, renderer, orbit, lights, mesh, bones, skeletonHelper;
    var joints = {};
    var start = Date.now();
    var frameRate = 25;
    var capturer;

    var headGaze;
    var offsetY = 600;

    var state = {
        play: true,
        frame: -1,
        record: false
    };

    function initScene() {

        gui = new dat.GUI();

        scene = new THREE.Scene();
        scene.background = new THREE.Color( 0x444444 );

        camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 5000 );
                        
        renderer = new THREE.WebGLRenderer( { antialias: true } );
        renderer.setPixelRatio( window.devicePixelRatio );
        if (state.record) {
            renderer.setSize( 1280, 720 );
        } else {
            renderer.setSize(window.innerWidth, window.innerHeight);

            window.addEventListener( 'resize', function () {

                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();

                renderer.setSize( window.innerWidth, window.innerHeight );

            }, false );
        }
        
        document.body.appendChild( renderer.domElement );

        orbit = new THREE.OrbitControls( camera, renderer.domElement );
        orbit.enableZoom = true;

        orbit.position0.set(500,500,400);
        //camera.up = new THREE.Vector3(0,0,1);
        //camera.lookAt(new THREE.Vector3(0,100,750));
        orbit.target0 = new THREE.Vector3(0,100,750);
        orbit.reset();

        lights = [];
        lights[ 0 ] = new THREE.PointLight( 0xffffff, 1, 0 );
        lights[ 1 ] = new THREE.PointLight( 0xffffff, 1, 0 );
        lights[ 2 ] = new THREE.PointLight( 0xffffff, 1, 0 );

        lights[ 0 ].position.set( 0, 200, 1000 );
        lights[ 1 ].position.set( 100, 200, 1000 );
        lights[ 2 ].position.set( 1000, 800, 0 );

        scene.add( lights[ 0 ] );
        scene.add( lights[ 1 ] );
        scene.add( lights[ 2 ] );

        //initBones();
        initSkeleton();
        initTable();
        initRobot3ds();
        initBox();

        capturer = new CCapture( { format: 'png' } );
        if (state.record) capturer.start();
    }

    function initBox() {
        var texture = new THREE.TextureLoader().load( "/images/dream.png" );
        // Create a geometry
        // 	Create a box (cube) of 10 width, length, and height
        var geometry = new THREE.BoxGeometry( 200, 400, 1000 );
        // Create a MeshBasicMaterial with a color white and with its wireframe turned on
        //var material = new THREE.MeshBasicMaterial( { color: 0xffffff, wireframe: true} );
        var material = new THREE.MeshBasicMaterial( { map: texture} );

        // Combine the geometry and material into a mesh
        var mesh = new THREE.Mesh( geometry, material );
        //mesh.position.set(-1400,0,1000);
        mesh.position.set(0,0,2000);
        mesh.rotation.set( 0,-Math.PI / 2,0);
        // Add the mesh to the scene
        scene.add( mesh );
    }

    function initSkeleton() {
        $.getJSON('/data_example.json',function(data) {
            console.log(data);
            var material = new THREE.MeshPhongMaterial({ color: 0x896215, emissive: 0xa96415, wireframe: true, skinning: true});
            frameRate = data.frame_rate;
            headGaze = data.head_gaze;
            for (var j in data.skeleton) {
                if (j == 'head') {
                    var head = new THREE.Mesh(new THREE.SphereGeometry(50, 6, 6), material);
                    var eye1 = new THREE.Mesh(new THREE.SphereGeometry(6, 6, 6), material);
                    var eye2 = new THREE.Mesh(new THREE.SphereGeometry(6, 6, 6), material);
                    eye1.position.set(20,2,45);
                    eye2.position.set(-20,2,45);
                    var joint = new THREE.Group();
                    joint.add(head);
                    joint.add(eye1);
                    joint.add(eye2);
                } else {
                    var joint = new THREE.Mesh(new THREE.SphereGeometry(10, 6, 6), material);
                }
                joint.positions = data.skeleton[j];
                joints[j] = joint;
                scene.add(joint);
            }

            setupDatGui();
        }, function(err) {
            console.log(err);
        });
    }

    function initTable() {
        var material = new THREE.MeshPhongMaterial({ color: 0x896215, emissive: 0xa96415, wireframe: true, skinning: true});
        var table = new THREE.Mesh(new THREE.BoxGeometry( 600, 10, 400 ), material ); 
        table.position.set(-20,0,750);
        scene.add(table);

        var loader = new THREE.TDSLoader( );
        loader.load( '/nao/Intervention WorkBench Design Version 1 Updated.ass', function ( object ) {
            console.log(object);
            object.scale.set( 10,10,10 ); 
            scene.add( object );
        });
    }

    function initRobot3ds() {
        var loader = new THREE.TDSLoader( );
        //loader.setResourcePath( '/examples/models/3ds/portalgun/textures/' );
        loader.load( '/nao/nao_iter1_03.3DS', function ( object ) {
            object.position.set(200,400,350);
            object.rotation.set( 0,-Math.PI / 2, Math.PI / 2 );
            object.scale.set( 0.7,0.7,0.7 ); 
            scene.add( object );
        });
    }

    function initRobot() {
        var loader = new THREE.STLLoader();
        loader.load( '/willow_nao_robot/polysoup.stl', function ( geometry ) {

            var material = new THREE.MeshPhongMaterial( { color: 0xff5533, specular: 0x111111, shininess: 200 } );
            var mesh = new THREE.Mesh( geometry, material );

            mesh.position.set(150,0,400);
            mesh.rotation.set( - Math.PI / 2,0,0 );
            mesh.scale.set( 6,6,6 ); 

            mesh.castShadow = true;
            mesh.receiveShadow = true;

            scene.add( mesh );

        } );

    }

    function createGeometry( sizing ) {

        var geometry = new THREE.CylinderBufferGeometry(
            5, // radiusTop
            5, // radiusBottom
            sizing.height, // height
            8, // radiusSegments
            sizing.segmentCount * 3, // heightSegments
            true // openEnded
        );

        var position = geometry.attributes.position;

        var vertex = new THREE.Vector3();

        var skinIndices = [];
        var skinWeights = [];

        for ( var i = 0; i < position.count; i ++ ) {

            vertex.fromBufferAttribute( position, i );

            var y = ( vertex.y + sizing.halfHeight );

            var skinIndex = Math.floor( y / sizing.segmentHeight );
            var skinWeight = ( y % sizing.segmentHeight ) / sizing.segmentHeight;

            skinIndices.push( skinIndex, skinIndex + 1, 0, 0 );
            skinWeights.push( 1 - skinWeight, skinWeight, 0, 0 );

        }

        geometry.addAttribute( 'skinIndex', new THREE.Uint16BufferAttribute( skinIndices, 4 ) );
        geometry.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( skinWeights, 4 ) );

        return geometry;

    }

    function createBones( sizing ) {

        bones = [];

        var prevBone = new THREE.Bone();
        bones.push( prevBone );
        prevBone.position.y = - sizing.halfHeight;

        for ( var i = 0; i < sizing.segmentCount; i ++ ) {

            var bone = new THREE.Bone();
            bone.position.y = sizing.segmentHeight;
            bones.push( bone );
            prevBone.add( bone );
            prevBone = bone;

        }

        return bones;

    }

    function createMesh( geometry, bones ) {

        var material = new THREE.MeshPhongMaterial( {
            skinning: true,
            color: 0x156289,
            emissive: 0x072534,
            side: THREE.DoubleSide,
            flatShading: true
        } );
        material = new THREE.MeshPhongMaterial({ color: 0x896215, emissive: 0xa96415, wireframe: true, skinning: true});

        var mesh = new THREE.SkinnedMesh( geometry,	material );
        var skeleton = new THREE.Skeleton( bones );

        mesh.add( bones[ 0 ] );

        mesh.bind( skeleton );

        skeletonHelper = new THREE.SkeletonHelper( mesh );
        skeletonHelper.material.linewidth = 2;
        scene.add( skeletonHelper );

        return mesh;

    }

    function setupDatGui() {

        //var folder = gui.addFolder( "General Options" );

        gui.add(state, "play" ).name( "Play" );
        gui.add(state, "frame", 0, headGaze.rx.length).listen().name( "Frame" );
{{!-- 
        folder.add( mesh, "pose" );
        folder.__controllers[ 1 ].name( ".pose()" );

        var bones = mesh.skeleton.bones;

        for ( var i = 0; i < bones.length; i ++ ) {

            var bone = bones[ i ];

            folder = gui.addFolder( "Bone " + i );

            folder.add( bone.position, 'x', - 10 + bone.position.x, 10 + bone.position.x );
            folder.add( bone.position, 'y', - 10 + bone.position.y, 10 + bone.position.y );
            folder.add( bone.position, 'z', - 10 + bone.position.z, 10 + bone.position.z );

            folder.add( bone.rotation, 'x', - Math.PI * 0.5, Math.PI * 0.5 );
            folder.add( bone.rotation, 'y', - Math.PI * 0.5, Math.PI * 0.5 );
            folder.add( bone.rotation, 'z', - Math.PI * 0.5, Math.PI * 0.5 );

            folder.add( bone.scale, 'x', 0, 2 );
            folder.add( bone.scale, 'y', 0, 2 );
            folder.add( bone.scale, 'z', 0, 2 );

            folder.__controllers[ 0 ].name( "position.x" );
            folder.__controllers[ 1 ].name( "position.y" );
            folder.__controllers[ 2 ].name( "position.z" );

            folder.__controllers[ 3 ].name( "rotation.x" );
            folder.__controllers[ 4 ].name( "rotation.y" );
            folder.__controllers[ 5 ].name( "rotation.z" );

            folder.__controllers[ 6 ].name( "scale.x" );
            folder.__controllers[ 7 ].name( "scale.y" );
            folder.__controllers[ 8 ].name( "scale.z" );

        } --}}

    }

    function initBones() {

        var segmentHeight = 8;
        var segmentCount = 4;
        var height = segmentHeight * segmentCount;
        var halfHeight = height * 0.5;

        var sizing = {
            segmentHeight: segmentHeight,
            segmentCount: segmentCount,
            height: height,
            halfHeight: halfHeight
        };

        var geometry = createGeometry( sizing );
        var bones = createBones( sizing );
        mesh = createMesh( geometry, bones );

        mesh.scale.multiplyScalar( 1 );
        scene.add( mesh );
    }

    function render() {

        requestAnimationFrame( render );

        var time = Date.now();

        if (state.play) {
            if (headGaze && state.frame < headGaze.rx.length) {  
                state.frame = state.record ? state.frame +1 : Math.round((time-start)/1000*frameRate);
            } else if (headGaze && state.record) {
                capturer.stop();
                capturer.save();
            }
        }

        var frame = parseInt(state.frame);

        for (j in joints) {
            var joint = joints[j];
            var x = joint.positions.x[frame];
            var y = joint.positions.y[frame];
            var z = joint.positions.z[frame];
            if (x) {
                joint.position.set(x,y+offsetY,z);
            }

            var rx = headGaze.rx[frame];
            var ry = headGaze.ry[frame];
            var rz = headGaze.rz[frame];
            if (j == 'head' && rx) {
                joint.lookAt(x+rx*10,y+ry*10+offsetY,z+rz*10);
            }

        }

        renderer.render( scene, camera );
        if (state.record) capturer.capture(renderer.domElement);
    }

    initScene();
    render();

</script>

<div style="position:absolute;left:20px;top:20px;color:white;">
    <b>The Open DREAM Dataset</b> |
    <a href="https://github.com/dream2020/DREAM-data-visualizer">github.com/dream2020/DREAM-data-visualizer</a> |
    <a href="https://www.dream2020.eu/">dream2020.eu</a>
</div>